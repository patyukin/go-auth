// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=../mocks/usecase_mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/bogatyr285/auth-go/internal/auth/entity"
	jwt "github.com/golang-jwt/jwt/v5"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// ExistsToken mocks base method.
func (m *MockUserRepository) ExistsToken(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsToken", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsToken indicates an expected call of ExistsToken.
func (mr *MockUserRepositoryMockRecorder) ExistsToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsToken", reflect.TypeOf((*MockUserRepository)(nil).ExistsToken), ctx, token)
}

// ExistsTokenByUserID mocks base method.
func (m *MockUserRepository) ExistsTokenByUserID(ctx context.Context, userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsTokenByUserID", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsTokenByUserID indicates an expected call of ExistsTokenByUserID.
func (mr *MockUserRepositoryMockRecorder) ExistsTokenByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsTokenByUserID", reflect.TypeOf((*MockUserRepository)(nil).ExistsTokenByUserID), ctx, userID)
}

// ExistsUserByUsername mocks base method.
func (m *MockUserRepository) ExistsUserByUsername(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsUserByUsername", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsUserByUsername indicates an expected call of ExistsUserByUsername.
func (mr *MockUserRepositoryMockRecorder) ExistsUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsUserByUsername", reflect.TypeOf((*MockUserRepository)(nil).ExistsUserByUsername), ctx, username)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepository) FindUserByEmail(ctx context.Context, username string) (entity.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, username)
	ret0, _ := ret[0].(entity.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepositoryMockRecorder) FindUserByEmail(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindUserByEmail), ctx, username)
}

// GenerateUserToken mocks base method.
func (m *MockUserRepository) GenerateUserToken(ctx context.Context, userID int) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserToken", ctx, userID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUserToken indicates an expected call of GenerateUserToken.
func (mr *MockUserRepositoryMockRecorder) GenerateUserToken(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserToken", reflect.TypeOf((*MockUserRepository)(nil).GenerateUserToken), ctx, userID)
}

// GetUserById mocks base method.
func (m *MockUserRepository) GetUserById(ctx context.Context, ID int) (entity.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, ID)
	ret0, _ := ret[0].(entity.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepositoryMockRecorder) GetUserById(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepository)(nil).GetUserById), ctx, ID)
}

// RegisterUser mocks base method.
func (m *MockUserRepository) RegisterUser(ctx context.Context, u entity.UserAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserRepositoryMockRecorder) RegisterUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserRepository)(nil).RegisterUser), ctx, u)
}

// SelectUserByToken mocks base method.
func (m *MockUserRepository) SelectUserByToken(ctx context.Context, token string) (entity.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByToken", ctx, token)
	ret0, _ := ret[0].(entity.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByToken indicates an expected call of SelectUserByToken.
func (mr *MockUserRepositoryMockRecorder) SelectUserByToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByToken", reflect.TypeOf((*MockUserRepository)(nil).SelectUserByToken), ctx, token)
}

// MockCryptoPassword is a mock of CryptoPassword interface.
type MockCryptoPassword struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoPasswordMockRecorder
}

// MockCryptoPasswordMockRecorder is the mock recorder for MockCryptoPassword.
type MockCryptoPasswordMockRecorder struct {
	mock *MockCryptoPassword
}

// NewMockCryptoPassword creates a new mock instance.
func NewMockCryptoPassword(ctrl *gomock.Controller) *MockCryptoPassword {
	mock := &MockCryptoPassword{ctrl: ctrl}
	mock.recorder = &MockCryptoPasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoPassword) EXPECT() *MockCryptoPasswordMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method.
func (m *MockCryptoPassword) ComparePasswords(fromUser, fromDB string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", fromUser, fromDB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockCryptoPasswordMockRecorder) ComparePasswords(fromUser, fromDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockCryptoPassword)(nil).ComparePasswords), fromUser, fromDB)
}

// HashPassword mocks base method.
func (m *MockCryptoPassword) HashPassword(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockCryptoPasswordMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockCryptoPassword)(nil).HashPassword), password)
}

// MockJWTManager is a mock of JWTManager interface.
type MockJWTManager struct {
	ctrl     *gomock.Controller
	recorder *MockJWTManagerMockRecorder
}

// MockJWTManagerMockRecorder is the mock recorder for MockJWTManager.
type MockJWTManagerMockRecorder struct {
	mock *MockJWTManager
}

// NewMockJWTManager creates a new mock instance.
func NewMockJWTManager(ctrl *gomock.Controller) *MockJWTManager {
	mock := &MockJWTManager{ctrl: ctrl}
	mock.recorder = &MockJWTManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTManager) EXPECT() *MockJWTManagerMockRecorder {
	return m.recorder
}

// IssueToken mocks base method.
func (m *MockJWTManager) IssueToken(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueToken indicates an expected call of IssueToken.
func (mr *MockJWTManagerMockRecorder) IssueToken(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueToken", reflect.TypeOf((*MockJWTManager)(nil).IssueToken), userID)
}

// VerifyToken mocks base method.
func (m *MockJWTManager) VerifyToken(tokenString string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockJWTManagerMockRecorder) VerifyToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJWTManager)(nil).VerifyToken), tokenString)
}
